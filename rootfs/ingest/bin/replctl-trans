#!/usr/bin/env python

# This file is part of qserv.
#
# Developed for the LSST Data Management System.
# This product includes software developed by the LSST Project
# (https://www.lsst.org).
# See the COPYRIGHT file at the top-level directory of this distribution
# for details of code ownership.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""
List or abort current super-transactions

@author  Fabrice Jammes, IN2P3
"""

# -------------------------------
#  Imports of standard modules --
# -------------------------------
import argparse
from enum import Enum
from typing import List

# ----------------------------
# Imports for other modules --
# ----------------------------
from qserv.ingest import Ingester, TransactionAction
import qserv.util as util

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="List and manage remaining"
                                     " replication controller transactions")

    parser.add_argument("repl_url", type=str,
                        help="Replication controller root URL",
                        action=util.BaseUrlAction)
    parser.add_argument("data_url", type=str, help="Input data URL",
                        action=util.BaseUrlAction)
    parser.add_argument("--verbose", "-v", action="store_true",
                        help="Use debug logging")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--abort-all", "-c", action="store_true", dest="abort_all",
                       help="Abort all started transactions")
    group.add_argument("--close", type=int, dest="close_trans_ids", nargs="+",
                       help="Close transactions with the given IDs")
    group.add_argument("--close-all", "-a", action="store_true", dest="close_all",
                       help="Close all started transactions")
    group.add_argument("--list", action="store_true",
                       help="List started transactions")
    group.add_argument("--start", action="store_true",
                       help="Start a new transaction")

    args = parser.parse_args()

    logger = util.get_default_logger(args.verbose)

    transaction_ids: List[int] = None
    ingester = Ingester(args.data_url, args.repl_url)

    # TODO add method in ingester
    if args.abort_all:
        action = TransactionAction.ABORT_ALL
    elif args.start:
        action = TransactionAction.START
    elif args.close_all:
        action = TransactionAction.CLOSE_ALL
    elif args.close_trans_ids:
        action = TransactionAction.CLOSE
        transaction_ids=args.close_trans_ids
    elif args.list:
        action = TransactionAction.LIST

    ingester.transaction_helper(action, transaction_ids)
